{
  "version": 3,
  "sources": ["../../src/webauthn-json/base64url.ts", "../../src/webauthn-json/convert.ts", "../../src/webauthn-json/basic/schema.ts", "../../src/webauthn-json/basic/api.ts", "../../src/webauthn-json/basic/supported.ts", "../../src/webauthn-json/extended/schema.ts", "../../src/webauthn-json/extended/api.ts"],
  "sourcesContent": ["export type Base64urlString = string;\n\nexport function base64urlToBuffer(\n  baseurl64String: Base64urlString,\n): ArrayBuffer {\n  // Base64url to Base64\n  const padding = \"==\".slice(0, (4 - (baseurl64String.length % 4)) % 4);\n  const base64String =\n    baseurl64String.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n\n  // Base64 to binary string\n  const str = atob(base64String);\n\n  // Binary string to buffer\n  const buffer = new ArrayBuffer(str.length);\n  const byteView = new Uint8Array(buffer);\n  for (let i = 0; i < str.length; i++) {\n    byteView[i] = str.charCodeAt(i);\n  }\n  return buffer;\n}\n\nexport function bufferToBase64url(buffer: ArrayBuffer): Base64urlString {\n  // Buffer to binary string\n  const byteView = new Uint8Array(buffer);\n  let str = \"\";\n  for (const charCode of byteView) {\n    str += String.fromCharCode(charCode);\n  }\n\n  // Binary string to base64\n  const base64String = btoa(str);\n\n  // Base64 to base64url\n  // We assume that the base64url string is well-formed.\n  const base64urlString = base64String.replace(/\\+/g, \"-\").replace(\n    /\\//g,\n    \"_\",\n  ).replace(/=/g, \"\");\n  return base64urlString;\n}\n", "// We export these values in order so that they can be used to deduplicate\n// schema definitions in minified JS code.\n\nimport { Schema, SchemaProperty } from \"./schema-format\";\n\n// TODO: Parcel isn't deduplicating these values.\nexport const copyValue = \"copy\";\nexport const convertValue = \"convert\";\n\nexport function convert<From, To>(\n  conversionFn: (v: From) => To,\n  schema: Schema,\n  input: any,\n): any {\n  if (schema === copyValue) {\n    return input;\n  }\n  if (schema === convertValue) {\n    return conversionFn(input);\n  }\n  if (schema instanceof Array) {\n    return input.map((v: any) => convert<From, To>(conversionFn, schema[0], v));\n  }\n  if (schema instanceof Object) {\n    const output: any = {};\n    for (const [key, schemaField] of Object.entries(schema)) {\n      if (schemaField.derive) {\n        const v = schemaField.derive(input);\n        if (v !== undefined) {\n          input[key] = v;\n        }\n      }\n\n      if (!(key in input)) {\n        if (schemaField.required) {\n          throw new Error(`Missing key: ${key}`);\n        }\n        continue;\n      }\n      // Fields can be null (rather than missing or `undefined`), e.g. the\n      // `userHandle` field of the `AuthenticatorAssertionResponse`:\n      // https://www.w3.org/TR/webauthn/#iface-authenticatorassertionresponse\n      if (input[key] == null) {\n        output[key] = null;\n        continue;\n      }\n      output[key] = convert<From, To>(\n        conversionFn,\n        schemaField.schema,\n        input[key],\n      );\n    }\n    return output;\n  }\n}\n\nexport function derived(\n  schema: Schema,\n  derive: (v: any) => any,\n): SchemaProperty {\n  return {\n    required: true,\n    schema,\n    derive,\n  };\n}\n\nexport function required(schema: Schema): SchemaProperty {\n  return {\n    required: true,\n    schema,\n  };\n}\n\nexport function optional(schema: Schema): SchemaProperty {\n  return {\n    required: false,\n    schema,\n  };\n}\n", "import { Schema } from \"../schema-format\";\nimport {\n  convertValue as convert,\n  copyValue as copy,\n  derived,\n  optional,\n  required,\n} from \"../convert\";\n\n// Shared by `create()` and `get()`.\n\nconst publicKeyCredentialDescriptorSchema: Schema = {\n  type: required(copy),\n  id: required(convert),\n  transports: optional(copy),\n};\n\nconst simplifiedExtensionsSchema: Schema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\nconst simplifiedClientExtensionResultsSchema = {\n  appid: optional(copy),\n  appidExclude: optional(copy),\n  credProps: optional(copy),\n};\n\n// `navigator.create()` request\n\nexport const credentialCreationOptions: Schema = {\n  publicKey: required({\n    rp: required(copy),\n    user: required({\n      id: required(convert),\n      name: required(copy),\n      displayName: required(copy),\n    }),\n\n    challenge: required(convert),\n    pubKeyCredParams: required(copy),\n\n    timeout: optional(copy),\n    excludeCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    authenticatorSelection: optional(copy),\n    attestation: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.create()` response\n\nexport const publicKeyCredentialWithAttestation: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    attestationObject: required(convert),\n    transports: derived(\n      copy,\n      (response: any) => response.getTransports?.() || [],\n    ),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\n// `navigator.get()` request\n\nexport const credentialRequestOptions: Schema = {\n  mediation: optional(copy),\n  publicKey: required({\n    challenge: required(convert),\n    timeout: optional(copy),\n    rpId: optional(copy),\n    allowCredentials: optional([publicKeyCredentialDescriptorSchema]),\n    userVerification: optional(copy),\n    extensions: optional(simplifiedExtensionsSchema),\n  }),\n  signal: optional(copy),\n};\n\n// `navigator.get()` response\n\nexport const publicKeyCredentialWithAssertion: Schema = {\n  type: required(copy),\n  id: required(copy),\n  rawId: required(convert),\n  authenticatorAttachment: optional(copy),\n  response: required({\n    clientDataJSON: required(convert),\n    authenticatorData: required(convert),\n    signature: required(convert),\n    userHandle: required(convert),\n  }),\n  clientExtensionResults: derived(\n    simplifiedClientExtensionResultsSchema,\n    (pkc: PublicKeyCredential) => pkc.getClientExtensionResults(),\n  ),\n};\n\nexport const schema: { [s: string]: Schema } = {\n  credentialCreationOptions,\n  publicKeyCredentialWithAttestation,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n};\n", "import { base64urlToBuffer, bufferToBase64url } from \"../base64url\";\nimport { convert } from \"../convert\";\nimport {\n  CredentialCreationOptionsJSON,\n  CredentialRequestOptionsJSON,\n  PublicKeyCredentialWithAssertionJSON,\n  PublicKeyCredentialWithAttestationJSON,\n} from \"./json\";\nimport {\n  credentialCreationOptions,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n  publicKeyCredentialWithAttestation,\n} from \"./schema\";\n\nexport function createRequestFromJSON(\n  requestJSON: CredentialCreationOptionsJSON,\n): CredentialCreationOptions {\n  return convert(base64urlToBuffer, credentialCreationOptions, requestJSON);\n}\n\nexport function createResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAttestationJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAttestation,\n    credential,\n  );\n}\n\nexport async function create(\n  requestJSON: CredentialCreationOptionsJSON,\n): Promise<PublicKeyCredentialWithAttestationJSON> {\n  const credential = (await navigator.credentials.create(\n    createRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return createResponseToJSON(credential);\n}\n\nexport function getRequestFromJSON(\n  requestJSON: CredentialRequestOptionsJSON,\n): CredentialRequestOptions {\n  return convert(base64urlToBuffer, credentialRequestOptions, requestJSON);\n}\n\nexport function getResponseToJSON(\n  credential: PublicKeyCredential,\n): PublicKeyCredentialWithAssertionJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAssertion,\n    credential,\n  );\n}\n\nexport async function get(\n  requestJSON: CredentialRequestOptionsJSON,\n): Promise<PublicKeyCredentialWithAssertionJSON> {\n  const credential = (await navigator.credentials.get(\n    getRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return getResponseToJSON(credential);\n}\n\ndeclare global {\n  interface Window {\n    PublicKeyCredential: PublicKeyCredential | undefined;\n  }\n}\n", "// This function does a simple check to test for the credential management API\n// functions we need, and an indication of public key credential authentication\n// support.\n// https://developers.google.com/web/updates/2018/03/webauthn-credential-management\n\nexport function supported(): boolean {\n  // rome-ignore format: Work around https://github.com/rome/tools/issues/3734\n  return !!(\n    // rome-ignore lint(style/useOptionalChain): Optional chaining creates more complicated ES2019 code\n    navigator.credentials &&\n    navigator.credentials.create &&\n    navigator.credentials.get &&\n    window.PublicKeyCredential\n  );\n}\n", "import {\n  credentialCreationOptions,\n  credentialRequestOptions,\n  publicKeyCredentialWithAssertion,\n  publicKeyCredentialWithAttestation,\n} from \"../basic/schema\";\nimport { convertValue, copyValue, derived, optional } from \"../convert\";\nimport { Schema } from \"../schema-format\";\n\n// shared\n\nconst authenticationExtensionsClientInputsSchema: Schema = {\n  appid: optional(copyValue),\n  appidExclude: optional(copyValue),\n  uvm: optional(copyValue),\n  credProps: optional(copyValue),\n  largeBlob: optional({\n    support: optional(copyValue),\n    read: optional(copyValue),\n    write: optional(convertValue),\n  }),\n};\n\nconst authenticationExtensionsClientOutputsSchema: Schema = {\n  appid: optional(copyValue),\n  appidExclude: optional(copyValue),\n  uvm: optional(copyValue),\n  credProps: optional(copyValue),\n  largeBlob: optional({\n    supported: optional(copyValue),\n    blob: optional(convertValue),\n    written: optional(copyValue),\n  }),\n};\n\n// create\n\nexport const credentialCreationOptionsExtended: Schema = JSON.parse(\n  JSON.stringify(credentialCreationOptions),\n);\n(credentialCreationOptionsExtended as any).publicKey.schema.extensions =\n  optional(authenticationExtensionsClientInputsSchema);\n\nexport const publicKeyCredentialWithAttestationExtended: Schema = JSON.parse(\n  JSON.stringify(publicKeyCredentialWithAttestation),\n);\n(publicKeyCredentialWithAttestationExtended as any).clientExtensionResults =\n  derived(\n    authenticationExtensionsClientOutputsSchema,\n    (publicKeyCredentialWithAttestation as any).clientExtensionResults.derive,\n  );\n(publicKeyCredentialWithAttestationExtended as any).response.schema.transports =\n  (publicKeyCredentialWithAttestation as any).response.schema.transports;\n// get\n\nexport const credentialRequestOptionsExtended: Schema = JSON.parse(\n  JSON.stringify(credentialRequestOptions),\n);\n(credentialRequestOptionsExtended as any).publicKey.schema.extensions =\n  optional(authenticationExtensionsClientInputsSchema);\n\nexport const publicKeyCredentialWithAssertionExtended: Schema = JSON.parse(\n  JSON.stringify(publicKeyCredentialWithAssertion),\n);\n(publicKeyCredentialWithAssertionExtended as any).clientExtensionResults =\n  derived(\n    authenticationExtensionsClientOutputsSchema,\n    (publicKeyCredentialWithAssertion as any).clientExtensionResults.derive,\n  );\n", "import {\n  base64urlToBuffer,\n  bufferToBase64url,\n  Base64urlString,\n} from \"../base64url\";\nimport { convert } from \"../convert\";\nimport {\n  AuthenticatorAttestationResponseJSON,\n  PublicKeyCredentialWithClientExtensionResults,\n} from \"../basic/json\";\nimport {\n  CredentialCreationOptionsExtendedJSON,\n  CredentialRequestOptionsExtendedJSON,\n  PublicKeyCredentialWithAssertionExtendedResultsJSON,\n  PublicKeyCredentialWithAttestationExtendedResultsJSON,\n  AuthenticatorAttestationResponseExtendedJSONCallable,\n  AuthenticatorAttestationResponseExtendedJSONCallablePartial,\n} from \"./json\";\nimport {\n  credentialCreationOptionsExtended,\n  credentialRequestOptionsExtended,\n  publicKeyCredentialWithAssertionExtended,\n  publicKeyCredentialWithAttestationExtended,\n} from \"./schema\";\n\n// create\n\nexport function createExtendedRequestFromJSON(\n  requestJSON: CredentialCreationOptionsExtendedJSON,\n): CredentialCreationOptions {\n  return convert(\n    base64urlToBuffer,\n    credentialCreationOptionsExtended,\n    requestJSON,\n  );\n}\n\nexport function createExtendedResponseToJSON(\n  credential: PublicKeyCredentialWithClientExtensionResults,\n): PublicKeyCredentialWithAttestationExtendedResultsJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAttestationExtended,\n    credential,\n  );\n}\n\ninterface AuthenticatorAttestationResponseExtendedCallablePartial {\n  getTransports?: () => string[];\n  getAuthenticatorData?: () => ArrayBuffer;\n  getPublicKey?: () => ArrayBuffer | null;\n  getPublicKeyAlgorithm?: () => COSEAlgorithmIdentifier;\n}\n\nfunction makeCallable(\n  jsonResponse: AuthenticatorAttestationResponseJSON,\n  credentialResponse: AuthenticatorAttestationResponseExtendedCallablePartial,\n): AuthenticatorAttestationResponseExtendedJSONCallable {\n  const callable: AuthenticatorAttestationResponseExtendedJSONCallablePartial =\n    {};\n\n  if (credentialResponse.getTransports) {\n    callable.getTransports = (): string[] => {\n      return credentialResponse.getTransports();\n    };\n  }\n\n  if (credentialResponse.getAuthenticatorData) {\n    callable.getAuthenticatorData = (): Base64urlString => {\n      return bufferToBase64url(credentialResponse.getAuthenticatorData());\n    };\n  }\n\n  if (credentialResponse.getPublicKey) {\n    callable.getPublicKey = (): Base64urlString => {\n      const publicKey = credentialResponse.getPublicKey();\n      return publicKey && bufferToBase64url(publicKey);\n    };\n  }\n\n  if (credentialResponse.getPublicKeyAlgorithm) {\n    callable.getPublicKeyAlgorithm = (): COSEAlgorithmIdentifier => {\n      return credentialResponse.getPublicKeyAlgorithm();\n    };\n  }\n\n  const newJSON = Object.create(callable);\n  Object.assign(newJSON, jsonResponse);\n  return newJSON;\n}\n\nexport async function createExtended(\n  requestJSON: CredentialCreationOptionsExtendedJSON,\n): Promise<PublicKeyCredentialWithAttestationExtendedResultsJSON> {\n  const credential = (await navigator.credentials.create(\n    createExtendedRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  const json = createExtendedResponseToJSON(credential);\n  json.response = makeCallable(\n    json.response,\n    credential.response as AuthenticatorAttestationResponseExtendedCallablePartial,\n  );\n  return json;\n}\n\n// get\n\nexport function getExtendedRequestFromJSON(\n  requestJSON: CredentialRequestOptionsExtendedJSON,\n): CredentialRequestOptions {\n  return convert(\n    base64urlToBuffer,\n    credentialRequestOptionsExtended,\n    requestJSON,\n  );\n}\n\nexport function getExtendedResponseToJSON(\n  credential: PublicKeyCredentialWithClientExtensionResults,\n): PublicKeyCredentialWithAssertionExtendedResultsJSON {\n  return convert(\n    bufferToBase64url,\n    publicKeyCredentialWithAssertionExtended,\n    credential,\n  );\n}\n\nexport async function getExtended(\n  requestJSON: CredentialRequestOptionsExtendedJSON,\n): Promise<PublicKeyCredentialWithAssertionExtendedResultsJSON> {\n  const credential = (await navigator.credentials.get(\n    getExtendedRequestFromJSON(requestJSON),\n  )) as PublicKeyCredential;\n  return getExtendedResponseToJSON(credential);\n}\n"],
  "mappings": "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",
  "names": ["schema"]
}
