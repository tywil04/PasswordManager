// Code generated by ent, DO NOT EDIT.

package note

import (
	"PasswordManager/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldName, v))
}

// NameIv applies equality check predicate on the "nameIv" field. It's identical to NameIvEQ.
func NameIv(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldNameIv, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitle, v))
}

// TitleIv applies equality check predicate on the "titleIv" field. It's identical to TitleIvEQ.
func TitleIv(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitleIv, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContent, v))
}

// ContentIv applies equality check predicate on the "contentIv" field. It's identical to ContentIvEQ.
func ContentIv(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContentIv, v))
}

// Colour applies equality check predicate on the "colour" field. It's identical to ColourEQ.
func Colour(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldColour, v))
}

// ColourIv applies equality check predicate on the "colourIv" field. It's identical to ColourIvEQ.
func ColourIv(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldColourIv, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldName, v))
}

// NameIvEQ applies the EQ predicate on the "nameIv" field.
func NameIvEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldNameIv, v))
}

// NameIvNEQ applies the NEQ predicate on the "nameIv" field.
func NameIvNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldNameIv, v))
}

// NameIvIn applies the In predicate on the "nameIv" field.
func NameIvIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldNameIv, vs...))
}

// NameIvNotIn applies the NotIn predicate on the "nameIv" field.
func NameIvNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldNameIv, vs...))
}

// NameIvGT applies the GT predicate on the "nameIv" field.
func NameIvGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldNameIv, v))
}

// NameIvGTE applies the GTE predicate on the "nameIv" field.
func NameIvGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldNameIv, v))
}

// NameIvLT applies the LT predicate on the "nameIv" field.
func NameIvLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldNameIv, v))
}

// NameIvLTE applies the LTE predicate on the "nameIv" field.
func NameIvLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldNameIv, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldTitle, v))
}

// TitleIvEQ applies the EQ predicate on the "titleIv" field.
func TitleIvEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldTitleIv, v))
}

// TitleIvNEQ applies the NEQ predicate on the "titleIv" field.
func TitleIvNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldTitleIv, v))
}

// TitleIvIn applies the In predicate on the "titleIv" field.
func TitleIvIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldTitleIv, vs...))
}

// TitleIvNotIn applies the NotIn predicate on the "titleIv" field.
func TitleIvNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldTitleIv, vs...))
}

// TitleIvGT applies the GT predicate on the "titleIv" field.
func TitleIvGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldTitleIv, v))
}

// TitleIvGTE applies the GTE predicate on the "titleIv" field.
func TitleIvGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldTitleIv, v))
}

// TitleIvLT applies the LT predicate on the "titleIv" field.
func TitleIvLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldTitleIv, v))
}

// TitleIvLTE applies the LTE predicate on the "titleIv" field.
func TitleIvLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldTitleIv, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldContent, v))
}

// ContentIvEQ applies the EQ predicate on the "contentIv" field.
func ContentIvEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldContentIv, v))
}

// ContentIvNEQ applies the NEQ predicate on the "contentIv" field.
func ContentIvNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldContentIv, v))
}

// ContentIvIn applies the In predicate on the "contentIv" field.
func ContentIvIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldContentIv, vs...))
}

// ContentIvNotIn applies the NotIn predicate on the "contentIv" field.
func ContentIvNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldContentIv, vs...))
}

// ContentIvGT applies the GT predicate on the "contentIv" field.
func ContentIvGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldContentIv, v))
}

// ContentIvGTE applies the GTE predicate on the "contentIv" field.
func ContentIvGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldContentIv, v))
}

// ContentIvLT applies the LT predicate on the "contentIv" field.
func ContentIvLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldContentIv, v))
}

// ContentIvLTE applies the LTE predicate on the "contentIv" field.
func ContentIvLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldContentIv, v))
}

// ColourEQ applies the EQ predicate on the "colour" field.
func ColourEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldColour, v))
}

// ColourNEQ applies the NEQ predicate on the "colour" field.
func ColourNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldColour, v))
}

// ColourIn applies the In predicate on the "colour" field.
func ColourIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldColour, vs...))
}

// ColourNotIn applies the NotIn predicate on the "colour" field.
func ColourNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldColour, vs...))
}

// ColourGT applies the GT predicate on the "colour" field.
func ColourGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldColour, v))
}

// ColourGTE applies the GTE predicate on the "colour" field.
func ColourGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldColour, v))
}

// ColourLT applies the LT predicate on the "colour" field.
func ColourLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldColour, v))
}

// ColourLTE applies the LTE predicate on the "colour" field.
func ColourLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldColour, v))
}

// ColourIvEQ applies the EQ predicate on the "colourIv" field.
func ColourIvEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldEQ(FieldColourIv, v))
}

// ColourIvNEQ applies the NEQ predicate on the "colourIv" field.
func ColourIvNEQ(v []byte) predicate.Note {
	return predicate.Note(sql.FieldNEQ(FieldColourIv, v))
}

// ColourIvIn applies the In predicate on the "colourIv" field.
func ColourIvIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldIn(FieldColourIv, vs...))
}

// ColourIvNotIn applies the NotIn predicate on the "colourIv" field.
func ColourIvNotIn(vs ...[]byte) predicate.Note {
	return predicate.Note(sql.FieldNotIn(FieldColourIv, vs...))
}

// ColourIvGT applies the GT predicate on the "colourIv" field.
func ColourIvGT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGT(FieldColourIv, v))
}

// ColourIvGTE applies the GTE predicate on the "colourIv" field.
func ColourIvGTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldGTE(FieldColourIv, v))
}

// ColourIvLT applies the LT predicate on the "colourIv" field.
func ColourIvLT(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLT(FieldColourIv, v))
}

// ColourIvLTE applies the LTE predicate on the "colourIv" field.
func ColourIvLTE(v []byte) predicate.Note {
	return predicate.Note(sql.FieldLTE(FieldColourIv, v))
}

// HasVault applies the HasEdge predicate on the "vault" edge.
func HasVault() predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVaultWith applies the HasEdge predicate on the "vault" edge with a given conditions (other predicates).
func HasVaultWith(preds ...predicate.Vault) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VaultInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Note) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Note) predicate.Note {
	return predicate.Note(func(s *sql.Selector) {
		p(s.Not())
	})
}
