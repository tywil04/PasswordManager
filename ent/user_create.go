// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PasswordManager/ent/emailchallenge"
	"PasswordManager/ent/password"
	"PasswordManager/ent/session"
	"PasswordManager/ent/user"
	"PasswordManager/ent/webauthnchallenge"
	"PasswordManager/ent/webauthncredential"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetStrengthenedMasterHash sets the "strengthenedMasterHash" field.
func (uc *UserCreate) SetStrengthenedMasterHash(b []byte) *UserCreate {
	uc.mutation.SetStrengthenedMasterHash(b)
	return uc
}

// SetStrengthenedMasterHashSalt sets the "strengthenedMasterHashSalt" field.
func (uc *UserCreate) SetStrengthenedMasterHashSalt(b []byte) *UserCreate {
	uc.mutation.SetStrengthenedMasterHashSalt(b)
	return uc
}

// SetProtectedDatabaseKey sets the "protectedDatabaseKey" field.
func (uc *UserCreate) SetProtectedDatabaseKey(b []byte) *UserCreate {
	uc.mutation.SetProtectedDatabaseKey(b)
	return uc
}

// SetProtectedDatabaseKeyIv sets the "protectedDatabaseKeyIv" field.
func (uc *UserCreate) SetProtectedDatabaseKeyIv(b []byte) *UserCreate {
	uc.mutation.SetProtectedDatabaseKeyIv(b)
	return uc
}

// SetDefault2FA sets the "default2FA" field.
func (uc *UserCreate) SetDefault2FA(u user.Default2FA) *UserCreate {
	uc.mutation.SetDefault2FA(u)
	return uc
}

// SetNillableDefault2FA sets the "default2FA" field if the given value is not nil.
func (uc *UserCreate) SetNillableDefault2FA(u *user.Default2FA) *UserCreate {
	if u != nil {
		uc.SetDefault2FA(*u)
	}
	return uc
}

// SetVerified sets the "verified" field.
func (uc *UserCreate) SetVerified(b bool) *UserCreate {
	uc.mutation.SetVerified(b)
	return uc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uc *UserCreate) SetNillableVerified(b *bool) *UserCreate {
	if b != nil {
		uc.SetVerified(*b)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uuid.UUID) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UserCreate) SetNillableID(u *uuid.UUID) *UserCreate {
	if u != nil {
		uc.SetID(*u)
	}
	return uc
}

// AddEmailChallengeIDs adds the "emailChallenges" edge to the EmailChallenge entity by IDs.
func (uc *UserCreate) AddEmailChallengeIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddEmailChallengeIDs(ids...)
	return uc
}

// AddEmailChallenges adds the "emailChallenges" edges to the EmailChallenge entity.
func (uc *UserCreate) AddEmailChallenges(e ...*EmailChallenge) *UserCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uc.AddEmailChallengeIDs(ids...)
}

// AddWebauthnCredentialIDs adds the "webauthnCredentials" edge to the WebAuthnCredential entity by IDs.
func (uc *UserCreate) AddWebauthnCredentialIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddWebauthnCredentialIDs(ids...)
	return uc
}

// AddWebauthnCredentials adds the "webauthnCredentials" edges to the WebAuthnCredential entity.
func (uc *UserCreate) AddWebauthnCredentials(w ...*WebAuthnCredential) *UserCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddWebauthnCredentialIDs(ids...)
}

// AddWebauthnChallengeIDs adds the "webauthnChallenges" edge to the WebAuthnChallenge entity by IDs.
func (uc *UserCreate) AddWebauthnChallengeIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddWebauthnChallengeIDs(ids...)
	return uc
}

// AddWebauthnChallenges adds the "webauthnChallenges" edges to the WebAuthnChallenge entity.
func (uc *UserCreate) AddWebauthnChallenges(w ...*WebAuthnChallenge) *UserCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uc.AddWebauthnChallengeIDs(ids...)
}

// AddPasswordIDs adds the "passwords" edge to the Password entity by IDs.
func (uc *UserCreate) AddPasswordIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddPasswordIDs(ids...)
	return uc
}

// AddPasswords adds the "passwords" edges to the Password entity.
func (uc *UserCreate) AddPasswords(p ...*Password) *UserCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddPasswordIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uc *UserCreate) AddSessionIDs(ids ...uuid.UUID) *UserCreate {
	uc.mutation.AddSessionIDs(ids...)
	return uc
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uc *UserCreate) AddSessions(s ...*Session) *UserCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uc.AddSessionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks[*User, UserMutation](ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Default2FA(); !ok {
		v := user.DefaultDefault2FA
		uc.mutation.SetDefault2FA(v)
	}
	if _, ok := uc.mutation.Verified(); !ok {
		v := user.DefaultVerified
		uc.mutation.SetVerified(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := user.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if v, ok := uc.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if _, ok := uc.mutation.StrengthenedMasterHash(); !ok {
		return &ValidationError{Name: "strengthenedMasterHash", err: errors.New(`ent: missing required field "User.strengthenedMasterHash"`)}
	}
	if v, ok := uc.mutation.StrengthenedMasterHash(); ok {
		if err := user.StrengthenedMasterHashValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHash", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHash": %w`, err)}
		}
	}
	if _, ok := uc.mutation.StrengthenedMasterHashSalt(); !ok {
		return &ValidationError{Name: "strengthenedMasterHashSalt", err: errors.New(`ent: missing required field "User.strengthenedMasterHashSalt"`)}
	}
	if v, ok := uc.mutation.StrengthenedMasterHashSalt(); ok {
		if err := user.StrengthenedMasterHashSaltValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHashSalt", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHashSalt": %w`, err)}
		}
	}
	if _, ok := uc.mutation.ProtectedDatabaseKey(); !ok {
		return &ValidationError{Name: "protectedDatabaseKey", err: errors.New(`ent: missing required field "User.protectedDatabaseKey"`)}
	}
	if v, ok := uc.mutation.ProtectedDatabaseKey(); ok {
		if err := user.ProtectedDatabaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKey", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKey": %w`, err)}
		}
	}
	if _, ok := uc.mutation.ProtectedDatabaseKeyIv(); !ok {
		return &ValidationError{Name: "protectedDatabaseKeyIv", err: errors.New(`ent: missing required field "User.protectedDatabaseKeyIv"`)}
	}
	if v, ok := uc.mutation.ProtectedDatabaseKeyIv(); ok {
		if err := user.ProtectedDatabaseKeyIvValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKeyIv", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKeyIv": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Default2FA(); !ok {
		return &ValidationError{Name: "default2FA", err: errors.New(`ent: missing required field "User.default2FA"`)}
	}
	if v, ok := uc.mutation.Default2FA(); ok {
		if err := user.Default2FAValidator(v); err != nil {
			return &ValidationError{Name: "default2FA", err: fmt.Errorf(`ent: validator failed for field "User.default2FA": %w`, err)}
		}
	}
	if _, ok := uc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`ent: missing required field "User.verified"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		}
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.StrengthenedMasterHash(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHash, field.TypeBytes, value)
		_node.StrengthenedMasterHash = value
	}
	if value, ok := uc.mutation.StrengthenedMasterHashSalt(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHashSalt, field.TypeBytes, value)
		_node.StrengthenedMasterHashSalt = value
	}
	if value, ok := uc.mutation.ProtectedDatabaseKey(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKey, field.TypeBytes, value)
		_node.ProtectedDatabaseKey = value
	}
	if value, ok := uc.mutation.ProtectedDatabaseKeyIv(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKeyIv, field.TypeBytes, value)
		_node.ProtectedDatabaseKeyIv = value
	}
	if value, ok := uc.mutation.Default2FA(); ok {
		_spec.SetField(user.FieldDefault2FA, field.TypeEnum, value)
		_node.Default2FA = value
	}
	if value, ok := uc.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if nodes := uc.mutation.EmailChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WebauthnCredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.WebauthnChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
