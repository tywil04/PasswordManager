// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PasswordManager/ent/emailchallenge"
	"PasswordManager/ent/password"
	"PasswordManager/ent/predicate"
	"PasswordManager/ent/session"
	"PasswordManager/ent/user"
	"PasswordManager/ent/webauthnchallenge"
	"PasswordManager/ent/webauthncredential"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetStrengthenedMasterHash sets the "strengthenedMasterHash" field.
func (uu *UserUpdate) SetStrengthenedMasterHash(b []byte) *UserUpdate {
	uu.mutation.SetStrengthenedMasterHash(b)
	return uu
}

// SetStrengthenedMasterHashSalt sets the "strengthenedMasterHashSalt" field.
func (uu *UserUpdate) SetStrengthenedMasterHashSalt(b []byte) *UserUpdate {
	uu.mutation.SetStrengthenedMasterHashSalt(b)
	return uu
}

// SetProtectedDatabaseKey sets the "protectedDatabaseKey" field.
func (uu *UserUpdate) SetProtectedDatabaseKey(b []byte) *UserUpdate {
	uu.mutation.SetProtectedDatabaseKey(b)
	return uu
}

// SetProtectedDatabaseKeyIv sets the "protectedDatabaseKeyIv" field.
func (uu *UserUpdate) SetProtectedDatabaseKeyIv(b []byte) *UserUpdate {
	uu.mutation.SetProtectedDatabaseKeyIv(b)
	return uu
}

// SetDefault2FA sets the "default2FA" field.
func (uu *UserUpdate) SetDefault2FA(u user.Default2FA) *UserUpdate {
	uu.mutation.SetDefault2FA(u)
	return uu
}

// SetNillableDefault2FA sets the "default2FA" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDefault2FA(u *user.Default2FA) *UserUpdate {
	if u != nil {
		uu.SetDefault2FA(*u)
	}
	return uu
}

// SetVerified sets the "verified" field.
func (uu *UserUpdate) SetVerified(b bool) *UserUpdate {
	uu.mutation.SetVerified(b)
	return uu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uu *UserUpdate) SetNillableVerified(b *bool) *UserUpdate {
	if b != nil {
		uu.SetVerified(*b)
	}
	return uu
}

// AddEmailChallengeIDs adds the "emailChallenges" edge to the EmailChallenge entity by IDs.
func (uu *UserUpdate) AddEmailChallengeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddEmailChallengeIDs(ids...)
	return uu
}

// AddEmailChallenges adds the "emailChallenges" edges to the EmailChallenge entity.
func (uu *UserUpdate) AddEmailChallenges(e ...*EmailChallenge) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEmailChallengeIDs(ids...)
}

// AddWebauthnCredentialIDs adds the "webauthnCredentials" edge to the WebAuthnCredential entity by IDs.
func (uu *UserUpdate) AddWebauthnCredentialIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddWebauthnCredentialIDs(ids...)
	return uu
}

// AddWebauthnCredentials adds the "webauthnCredentials" edges to the WebAuthnCredential entity.
func (uu *UserUpdate) AddWebauthnCredentials(w ...*WebAuthnCredential) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWebauthnCredentialIDs(ids...)
}

// AddWebauthnChallengeIDs adds the "webauthnChallenges" edge to the WebAuthnChallenge entity by IDs.
func (uu *UserUpdate) AddWebauthnChallengeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddWebauthnChallengeIDs(ids...)
	return uu
}

// AddWebauthnChallenges adds the "webauthnChallenges" edges to the WebAuthnChallenge entity.
func (uu *UserUpdate) AddWebauthnChallenges(w ...*WebAuthnChallenge) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWebauthnChallengeIDs(ids...)
}

// AddPasswordIDs adds the "passwords" edge to the Password entity by IDs.
func (uu *UserUpdate) AddPasswordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddPasswordIDs(ids...)
	return uu
}

// AddPasswords adds the "passwords" edges to the Password entity.
func (uu *UserUpdate) AddPasswords(p ...*Password) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPasswordIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearEmailChallenges clears all "emailChallenges" edges to the EmailChallenge entity.
func (uu *UserUpdate) ClearEmailChallenges() *UserUpdate {
	uu.mutation.ClearEmailChallenges()
	return uu
}

// RemoveEmailChallengeIDs removes the "emailChallenges" edge to EmailChallenge entities by IDs.
func (uu *UserUpdate) RemoveEmailChallengeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveEmailChallengeIDs(ids...)
	return uu
}

// RemoveEmailChallenges removes "emailChallenges" edges to EmailChallenge entities.
func (uu *UserUpdate) RemoveEmailChallenges(e ...*EmailChallenge) *UserUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEmailChallengeIDs(ids...)
}

// ClearWebauthnCredentials clears all "webauthnCredentials" edges to the WebAuthnCredential entity.
func (uu *UserUpdate) ClearWebauthnCredentials() *UserUpdate {
	uu.mutation.ClearWebauthnCredentials()
	return uu
}

// RemoveWebauthnCredentialIDs removes the "webauthnCredentials" edge to WebAuthnCredential entities by IDs.
func (uu *UserUpdate) RemoveWebauthnCredentialIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveWebauthnCredentialIDs(ids...)
	return uu
}

// RemoveWebauthnCredentials removes "webauthnCredentials" edges to WebAuthnCredential entities.
func (uu *UserUpdate) RemoveWebauthnCredentials(w ...*WebAuthnCredential) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWebauthnCredentialIDs(ids...)
}

// ClearWebauthnChallenges clears all "webauthnChallenges" edges to the WebAuthnChallenge entity.
func (uu *UserUpdate) ClearWebauthnChallenges() *UserUpdate {
	uu.mutation.ClearWebauthnChallenges()
	return uu
}

// RemoveWebauthnChallengeIDs removes the "webauthnChallenges" edge to WebAuthnChallenge entities by IDs.
func (uu *UserUpdate) RemoveWebauthnChallengeIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveWebauthnChallengeIDs(ids...)
	return uu
}

// RemoveWebauthnChallenges removes "webauthnChallenges" edges to WebAuthnChallenge entities.
func (uu *UserUpdate) RemoveWebauthnChallenges(w ...*WebAuthnChallenge) *UserUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWebauthnChallengeIDs(ids...)
}

// ClearPasswords clears all "passwords" edges to the Password entity.
func (uu *UserUpdate) ClearPasswords() *UserUpdate {
	uu.mutation.ClearPasswords()
	return uu
}

// RemovePasswordIDs removes the "passwords" edge to Password entities by IDs.
func (uu *UserUpdate) RemovePasswordIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemovePasswordIDs(ids...)
	return uu
}

// RemovePasswords removes "passwords" edges to Password entities.
func (uu *UserUpdate) RemovePasswords(p ...*Password) *UserUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePasswordIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UserMutation](ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.StrengthenedMasterHash(); ok {
		if err := user.StrengthenedMasterHashValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHash", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHash": %w`, err)}
		}
	}
	if v, ok := uu.mutation.StrengthenedMasterHashSalt(); ok {
		if err := user.StrengthenedMasterHashSaltValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHashSalt", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHashSalt": %w`, err)}
		}
	}
	if v, ok := uu.mutation.ProtectedDatabaseKey(); ok {
		if err := user.ProtectedDatabaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKey", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKey": %w`, err)}
		}
	}
	if v, ok := uu.mutation.ProtectedDatabaseKeyIv(); ok {
		if err := user.ProtectedDatabaseKeyIvValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKeyIv", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKeyIv": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Default2FA(); ok {
		if err := user.Default2FAValidator(v); err != nil {
			return &ValidationError{Name: "default2FA", err: fmt.Errorf(`ent: validator failed for field "User.default2FA": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.StrengthenedMasterHash(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHash, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.StrengthenedMasterHashSalt(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHashSalt, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.ProtectedDatabaseKey(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKey, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.ProtectedDatabaseKeyIv(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKeyIv, field.TypeBytes, value)
	}
	if value, ok := uu.mutation.Default2FA(); ok {
		_spec.SetField(user.FieldDefault2FA, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if uu.mutation.EmailChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEmailChallengesIDs(); len(nodes) > 0 && !uu.mutation.EmailChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EmailChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WebauthnCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWebauthnCredentialsIDs(); len(nodes) > 0 && !uu.mutation.WebauthnCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WebauthnCredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WebauthnChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWebauthnChallengesIDs(); len(nodes) > 0 && !uu.mutation.WebauthnChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WebauthnChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPasswordsIDs(); len(nodes) > 0 && !uu.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetStrengthenedMasterHash sets the "strengthenedMasterHash" field.
func (uuo *UserUpdateOne) SetStrengthenedMasterHash(b []byte) *UserUpdateOne {
	uuo.mutation.SetStrengthenedMasterHash(b)
	return uuo
}

// SetStrengthenedMasterHashSalt sets the "strengthenedMasterHashSalt" field.
func (uuo *UserUpdateOne) SetStrengthenedMasterHashSalt(b []byte) *UserUpdateOne {
	uuo.mutation.SetStrengthenedMasterHashSalt(b)
	return uuo
}

// SetProtectedDatabaseKey sets the "protectedDatabaseKey" field.
func (uuo *UserUpdateOne) SetProtectedDatabaseKey(b []byte) *UserUpdateOne {
	uuo.mutation.SetProtectedDatabaseKey(b)
	return uuo
}

// SetProtectedDatabaseKeyIv sets the "protectedDatabaseKeyIv" field.
func (uuo *UserUpdateOne) SetProtectedDatabaseKeyIv(b []byte) *UserUpdateOne {
	uuo.mutation.SetProtectedDatabaseKeyIv(b)
	return uuo
}

// SetDefault2FA sets the "default2FA" field.
func (uuo *UserUpdateOne) SetDefault2FA(u user.Default2FA) *UserUpdateOne {
	uuo.mutation.SetDefault2FA(u)
	return uuo
}

// SetNillableDefault2FA sets the "default2FA" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDefault2FA(u *user.Default2FA) *UserUpdateOne {
	if u != nil {
		uuo.SetDefault2FA(*u)
	}
	return uuo
}

// SetVerified sets the "verified" field.
func (uuo *UserUpdateOne) SetVerified(b bool) *UserUpdateOne {
	uuo.mutation.SetVerified(b)
	return uuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableVerified(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetVerified(*b)
	}
	return uuo
}

// AddEmailChallengeIDs adds the "emailChallenges" edge to the EmailChallenge entity by IDs.
func (uuo *UserUpdateOne) AddEmailChallengeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddEmailChallengeIDs(ids...)
	return uuo
}

// AddEmailChallenges adds the "emailChallenges" edges to the EmailChallenge entity.
func (uuo *UserUpdateOne) AddEmailChallenges(e ...*EmailChallenge) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEmailChallengeIDs(ids...)
}

// AddWebauthnCredentialIDs adds the "webauthnCredentials" edge to the WebAuthnCredential entity by IDs.
func (uuo *UserUpdateOne) AddWebauthnCredentialIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddWebauthnCredentialIDs(ids...)
	return uuo
}

// AddWebauthnCredentials adds the "webauthnCredentials" edges to the WebAuthnCredential entity.
func (uuo *UserUpdateOne) AddWebauthnCredentials(w ...*WebAuthnCredential) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWebauthnCredentialIDs(ids...)
}

// AddWebauthnChallengeIDs adds the "webauthnChallenges" edge to the WebAuthnChallenge entity by IDs.
func (uuo *UserUpdateOne) AddWebauthnChallengeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddWebauthnChallengeIDs(ids...)
	return uuo
}

// AddWebauthnChallenges adds the "webauthnChallenges" edges to the WebAuthnChallenge entity.
func (uuo *UserUpdateOne) AddWebauthnChallenges(w ...*WebAuthnChallenge) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWebauthnChallengeIDs(ids...)
}

// AddPasswordIDs adds the "passwords" edge to the Password entity by IDs.
func (uuo *UserUpdateOne) AddPasswordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddPasswordIDs(ids...)
	return uuo
}

// AddPasswords adds the "passwords" edges to the Password entity.
func (uuo *UserUpdateOne) AddPasswords(p ...*Password) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPasswordIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearEmailChallenges clears all "emailChallenges" edges to the EmailChallenge entity.
func (uuo *UserUpdateOne) ClearEmailChallenges() *UserUpdateOne {
	uuo.mutation.ClearEmailChallenges()
	return uuo
}

// RemoveEmailChallengeIDs removes the "emailChallenges" edge to EmailChallenge entities by IDs.
func (uuo *UserUpdateOne) RemoveEmailChallengeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveEmailChallengeIDs(ids...)
	return uuo
}

// RemoveEmailChallenges removes "emailChallenges" edges to EmailChallenge entities.
func (uuo *UserUpdateOne) RemoveEmailChallenges(e ...*EmailChallenge) *UserUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEmailChallengeIDs(ids...)
}

// ClearWebauthnCredentials clears all "webauthnCredentials" edges to the WebAuthnCredential entity.
func (uuo *UserUpdateOne) ClearWebauthnCredentials() *UserUpdateOne {
	uuo.mutation.ClearWebauthnCredentials()
	return uuo
}

// RemoveWebauthnCredentialIDs removes the "webauthnCredentials" edge to WebAuthnCredential entities by IDs.
func (uuo *UserUpdateOne) RemoveWebauthnCredentialIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveWebauthnCredentialIDs(ids...)
	return uuo
}

// RemoveWebauthnCredentials removes "webauthnCredentials" edges to WebAuthnCredential entities.
func (uuo *UserUpdateOne) RemoveWebauthnCredentials(w ...*WebAuthnCredential) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWebauthnCredentialIDs(ids...)
}

// ClearWebauthnChallenges clears all "webauthnChallenges" edges to the WebAuthnChallenge entity.
func (uuo *UserUpdateOne) ClearWebauthnChallenges() *UserUpdateOne {
	uuo.mutation.ClearWebauthnChallenges()
	return uuo
}

// RemoveWebauthnChallengeIDs removes the "webauthnChallenges" edge to WebAuthnChallenge entities by IDs.
func (uuo *UserUpdateOne) RemoveWebauthnChallengeIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveWebauthnChallengeIDs(ids...)
	return uuo
}

// RemoveWebauthnChallenges removes "webauthnChallenges" edges to WebAuthnChallenge entities.
func (uuo *UserUpdateOne) RemoveWebauthnChallenges(w ...*WebAuthnChallenge) *UserUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWebauthnChallengeIDs(ids...)
}

// ClearPasswords clears all "passwords" edges to the Password entity.
func (uuo *UserUpdateOne) ClearPasswords() *UserUpdateOne {
	uuo.mutation.ClearPasswords()
	return uuo
}

// RemovePasswordIDs removes the "passwords" edge to Password entities by IDs.
func (uuo *UserUpdateOne) RemovePasswordIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemovePasswordIDs(ids...)
	return uuo
}

// RemovePasswords removes "passwords" edges to Password entities.
func (uuo *UserUpdateOne) RemovePasswords(p ...*Password) *UserUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePasswordIDs(ids...)
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks[*User, UserMutation](ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.StrengthenedMasterHash(); ok {
		if err := user.StrengthenedMasterHashValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHash", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHash": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.StrengthenedMasterHashSalt(); ok {
		if err := user.StrengthenedMasterHashSaltValidator(v); err != nil {
			return &ValidationError{Name: "strengthenedMasterHashSalt", err: fmt.Errorf(`ent: validator failed for field "User.strengthenedMasterHashSalt": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.ProtectedDatabaseKey(); ok {
		if err := user.ProtectedDatabaseKeyValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKey", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKey": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.ProtectedDatabaseKeyIv(); ok {
		if err := user.ProtectedDatabaseKeyIvValidator(v); err != nil {
			return &ValidationError{Name: "protectedDatabaseKeyIv", err: fmt.Errorf(`ent: validator failed for field "User.protectedDatabaseKeyIv": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Default2FA(); ok {
		if err := user.Default2FAValidator(v); err != nil {
			return &ValidationError{Name: "default2FA", err: fmt.Errorf(`ent: validator failed for field "User.default2FA": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.StrengthenedMasterHash(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHash, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.StrengthenedMasterHashSalt(); ok {
		_spec.SetField(user.FieldStrengthenedMasterHashSalt, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.ProtectedDatabaseKey(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKey, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.ProtectedDatabaseKeyIv(); ok {
		_spec.SetField(user.FieldProtectedDatabaseKeyIv, field.TypeBytes, value)
	}
	if value, ok := uuo.mutation.Default2FA(); ok {
		_spec.SetField(user.FieldDefault2FA, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.Verified(); ok {
		_spec.SetField(user.FieldVerified, field.TypeBool, value)
	}
	if uuo.mutation.EmailChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEmailChallengesIDs(); len(nodes) > 0 && !uuo.mutation.EmailChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EmailChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailChallengesTable,
			Columns: []string{user.EmailChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: emailchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WebauthnCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWebauthnCredentialsIDs(); len(nodes) > 0 && !uuo.mutation.WebauthnCredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WebauthnCredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnCredentialsTable,
			Columns: []string{user.WebauthnCredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthncredential.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WebauthnChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWebauthnChallengesIDs(); len(nodes) > 0 && !uuo.mutation.WebauthnChallengesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WebauthnChallengesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnChallengesTable,
			Columns: []string{user.WebauthnChallengesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: webauthnchallenge.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPasswordsIDs(); len(nodes) > 0 && !uuo.mutation.PasswordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PasswordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordsTable,
			Columns: []string{user.PasswordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: password.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
