// Code generated by ent, DO NOT EDIT.

package url

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the url type in the database.
	Label = "url"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldUrlIv holds the string denoting the urliv field in the database.
	FieldUrlIv = "url_iv"
	// EdgePassword holds the string denoting the password edge name in mutations.
	EdgePassword = "password"
	// Table holds the table name of the url in the database.
	Table = "urls"
	// PasswordTable is the table that holds the password relation/edge.
	PasswordTable = "urls"
	// PasswordInverseTable is the table name for the Password entity.
	// It exists in this package in order to avoid circular dependency with the "password" package.
	PasswordInverseTable = "passwords"
	// PasswordColumn is the table column denoting the password relation/edge.
	PasswordColumn = "password_urls"
)

// Columns holds all SQL columns for url fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldUrlIv,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "urls"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"password_urls",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// URLValidator is a validator for the "url" field. It is called by the builders before save.
	URLValidator func([]byte) error
	// UrlIvValidator is a validator for the "urlIv" field. It is called by the builders before save.
	UrlIvValidator func([]byte) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
