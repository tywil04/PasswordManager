// Code generated by ent, DO NOT EDIT.

package webauthnchallenge

import (
	"PasswordManager/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLTE(FieldID, id))
}

// Challenge applies equality check predicate on the "challenge" field. It's identical to ChallengeEQ.
func Challenge(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldChallenge, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldUserId, v))
}

// UserVerification applies equality check predicate on the "userVerification" field. It's identical to UserVerificationEQ.
func UserVerification(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldUserVerification, v))
}

// ChallengeEQ applies the EQ predicate on the "challenge" field.
func ChallengeEQ(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldChallenge, v))
}

// ChallengeNEQ applies the NEQ predicate on the "challenge" field.
func ChallengeNEQ(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNEQ(FieldChallenge, v))
}

// ChallengeIn applies the In predicate on the "challenge" field.
func ChallengeIn(vs ...string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIn(FieldChallenge, vs...))
}

// ChallengeNotIn applies the NotIn predicate on the "challenge" field.
func ChallengeNotIn(vs ...string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotIn(FieldChallenge, vs...))
}

// ChallengeGT applies the GT predicate on the "challenge" field.
func ChallengeGT(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGT(FieldChallenge, v))
}

// ChallengeGTE applies the GTE predicate on the "challenge" field.
func ChallengeGTE(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGTE(FieldChallenge, v))
}

// ChallengeLT applies the LT predicate on the "challenge" field.
func ChallengeLT(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLT(FieldChallenge, v))
}

// ChallengeLTE applies the LTE predicate on the "challenge" field.
func ChallengeLTE(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLTE(FieldChallenge, v))
}

// ChallengeContains applies the Contains predicate on the "challenge" field.
func ChallengeContains(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldContains(FieldChallenge, v))
}

// ChallengeHasPrefix applies the HasPrefix predicate on the "challenge" field.
func ChallengeHasPrefix(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldHasPrefix(FieldChallenge, v))
}

// ChallengeHasSuffix applies the HasSuffix predicate on the "challenge" field.
func ChallengeHasSuffix(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldHasSuffix(FieldChallenge, v))
}

// ChallengeIsNil applies the IsNil predicate on the "challenge" field.
func ChallengeIsNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIsNull(FieldChallenge))
}

// ChallengeNotNil applies the NotNil predicate on the "challenge" field.
func ChallengeNotNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotNull(FieldChallenge))
}

// ChallengeEqualFold applies the EqualFold predicate on the "challenge" field.
func ChallengeEqualFold(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEqualFold(FieldChallenge, v))
}

// ChallengeContainsFold applies the ContainsFold predicate on the "challenge" field.
func ChallengeContainsFold(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldContainsFold(FieldChallenge, v))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...[]byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...[]byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v []byte) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLTE(FieldUserId, v))
}

// UserIdIsNil applies the IsNil predicate on the "userId" field.
func UserIdIsNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIsNull(FieldUserId))
}

// UserIdNotNil applies the NotNil predicate on the "userId" field.
func UserIdNotNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotNull(FieldUserId))
}

// AllowedCredentialIdsIsNil applies the IsNil predicate on the "allowedCredentialIds" field.
func AllowedCredentialIdsIsNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIsNull(FieldAllowedCredentialIds))
}

// AllowedCredentialIdsNotNil applies the NotNil predicate on the "allowedCredentialIds" field.
func AllowedCredentialIdsNotNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotNull(FieldAllowedCredentialIds))
}

// UserVerificationEQ applies the EQ predicate on the "userVerification" field.
func UserVerificationEQ(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEQ(FieldUserVerification, v))
}

// UserVerificationNEQ applies the NEQ predicate on the "userVerification" field.
func UserVerificationNEQ(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNEQ(FieldUserVerification, v))
}

// UserVerificationIn applies the In predicate on the "userVerification" field.
func UserVerificationIn(vs ...string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIn(FieldUserVerification, vs...))
}

// UserVerificationNotIn applies the NotIn predicate on the "userVerification" field.
func UserVerificationNotIn(vs ...string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotIn(FieldUserVerification, vs...))
}

// UserVerificationGT applies the GT predicate on the "userVerification" field.
func UserVerificationGT(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGT(FieldUserVerification, v))
}

// UserVerificationGTE applies the GTE predicate on the "userVerification" field.
func UserVerificationGTE(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldGTE(FieldUserVerification, v))
}

// UserVerificationLT applies the LT predicate on the "userVerification" field.
func UserVerificationLT(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLT(FieldUserVerification, v))
}

// UserVerificationLTE applies the LTE predicate on the "userVerification" field.
func UserVerificationLTE(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldLTE(FieldUserVerification, v))
}

// UserVerificationContains applies the Contains predicate on the "userVerification" field.
func UserVerificationContains(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldContains(FieldUserVerification, v))
}

// UserVerificationHasPrefix applies the HasPrefix predicate on the "userVerification" field.
func UserVerificationHasPrefix(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldHasPrefix(FieldUserVerification, v))
}

// UserVerificationHasSuffix applies the HasSuffix predicate on the "userVerification" field.
func UserVerificationHasSuffix(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldHasSuffix(FieldUserVerification, v))
}

// UserVerificationIsNil applies the IsNil predicate on the "userVerification" field.
func UserVerificationIsNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIsNull(FieldUserVerification))
}

// UserVerificationNotNil applies the NotNil predicate on the "userVerification" field.
func UserVerificationNotNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotNull(FieldUserVerification))
}

// UserVerificationEqualFold applies the EqualFold predicate on the "userVerification" field.
func UserVerificationEqualFold(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldEqualFold(FieldUserVerification, v))
}

// UserVerificationContainsFold applies the ContainsFold predicate on the "userVerification" field.
func UserVerificationContainsFold(v string) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldContainsFold(FieldUserVerification, v))
}

// ExtensionsIsNil applies the IsNil predicate on the "extensions" field.
func ExtensionsIsNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldIsNull(FieldExtensions))
}

// ExtensionsNotNil applies the NotNil predicate on the "extensions" field.
func ExtensionsNotNil() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(sql.FieldNotNull(FieldExtensions))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebAuthnChallenge) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebAuthnChallenge) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebAuthnChallenge) predicate.WebAuthnChallenge {
	return predicate.WebAuthnChallenge(func(s *sql.Selector) {
		p(s.Not())
	})
}
