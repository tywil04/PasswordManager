// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"PasswordManager/ent/migrate"

	"PasswordManager/ent/additionalfield"
	"PasswordManager/ent/emailchallenge"
	"PasswordManager/ent/password"
	"PasswordManager/ent/session"
	"PasswordManager/ent/url"
	"PasswordManager/ent/user"
	"PasswordManager/ent/webauthnchallenge"
	"PasswordManager/ent/webauthncredential"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AdditionalField is the client for interacting with the AdditionalField builders.
	AdditionalField *AdditionalFieldClient
	// EmailChallenge is the client for interacting with the EmailChallenge builders.
	EmailChallenge *EmailChallengeClient
	// Password is the client for interacting with the Password builders.
	Password *PasswordClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// Url is the client for interacting with the Url builders.
	Url *URLClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WebAuthnChallenge is the client for interacting with the WebAuthnChallenge builders.
	WebAuthnChallenge *WebAuthnChallengeClient
	// WebAuthnCredential is the client for interacting with the WebAuthnCredential builders.
	WebAuthnCredential *WebAuthnCredentialClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AdditionalField = NewAdditionalFieldClient(c.config)
	c.EmailChallenge = NewEmailChallengeClient(c.config)
	c.Password = NewPasswordClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.Url = NewURLClient(c.config)
	c.User = NewUserClient(c.config)
	c.WebAuthnChallenge = NewWebAuthnChallengeClient(c.config)
	c.WebAuthnCredential = NewWebAuthnCredentialClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		AdditionalField:    NewAdditionalFieldClient(cfg),
		EmailChallenge:     NewEmailChallengeClient(cfg),
		Password:           NewPasswordClient(cfg),
		Session:            NewSessionClient(cfg),
		Url:                NewURLClient(cfg),
		User:               NewUserClient(cfg),
		WebAuthnChallenge:  NewWebAuthnChallengeClient(cfg),
		WebAuthnCredential: NewWebAuthnCredentialClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                ctx,
		config:             cfg,
		AdditionalField:    NewAdditionalFieldClient(cfg),
		EmailChallenge:     NewEmailChallengeClient(cfg),
		Password:           NewPasswordClient(cfg),
		Session:            NewSessionClient(cfg),
		Url:                NewURLClient(cfg),
		User:               NewUserClient(cfg),
		WebAuthnChallenge:  NewWebAuthnChallengeClient(cfg),
		WebAuthnCredential: NewWebAuthnCredentialClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AdditionalField.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AdditionalField.Use(hooks...)
	c.EmailChallenge.Use(hooks...)
	c.Password.Use(hooks...)
	c.Session.Use(hooks...)
	c.Url.Use(hooks...)
	c.User.Use(hooks...)
	c.WebAuthnChallenge.Use(hooks...)
	c.WebAuthnCredential.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.AdditionalField.Intercept(interceptors...)
	c.EmailChallenge.Intercept(interceptors...)
	c.Password.Intercept(interceptors...)
	c.Session.Intercept(interceptors...)
	c.Url.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.WebAuthnChallenge.Intercept(interceptors...)
	c.WebAuthnCredential.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AdditionalFieldMutation:
		return c.AdditionalField.mutate(ctx, m)
	case *EmailChallengeMutation:
		return c.EmailChallenge.mutate(ctx, m)
	case *PasswordMutation:
		return c.Password.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *URLMutation:
		return c.Url.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WebAuthnChallengeMutation:
		return c.WebAuthnChallenge.mutate(ctx, m)
	case *WebAuthnCredentialMutation:
		return c.WebAuthnCredential.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AdditionalFieldClient is a client for the AdditionalField schema.
type AdditionalFieldClient struct {
	config
}

// NewAdditionalFieldClient returns a client for the AdditionalField from the given config.
func NewAdditionalFieldClient(c config) *AdditionalFieldClient {
	return &AdditionalFieldClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `additionalfield.Hooks(f(g(h())))`.
func (c *AdditionalFieldClient) Use(hooks ...Hook) {
	c.hooks.AdditionalField = append(c.hooks.AdditionalField, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `additionalfield.Intercept(f(g(h())))`.
func (c *AdditionalFieldClient) Intercept(interceptors ...Interceptor) {
	c.inters.AdditionalField = append(c.inters.AdditionalField, interceptors...)
}

// Create returns a builder for creating a AdditionalField entity.
func (c *AdditionalFieldClient) Create() *AdditionalFieldCreate {
	mutation := newAdditionalFieldMutation(c.config, OpCreate)
	return &AdditionalFieldCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AdditionalField entities.
func (c *AdditionalFieldClient) CreateBulk(builders ...*AdditionalFieldCreate) *AdditionalFieldCreateBulk {
	return &AdditionalFieldCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AdditionalField.
func (c *AdditionalFieldClient) Update() *AdditionalFieldUpdate {
	mutation := newAdditionalFieldMutation(c.config, OpUpdate)
	return &AdditionalFieldUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AdditionalFieldClient) UpdateOne(af *AdditionalField) *AdditionalFieldUpdateOne {
	mutation := newAdditionalFieldMutation(c.config, OpUpdateOne, withAdditionalField(af))
	return &AdditionalFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AdditionalFieldClient) UpdateOneID(id uuid.UUID) *AdditionalFieldUpdateOne {
	mutation := newAdditionalFieldMutation(c.config, OpUpdateOne, withAdditionalFieldID(id))
	return &AdditionalFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AdditionalField.
func (c *AdditionalFieldClient) Delete() *AdditionalFieldDelete {
	mutation := newAdditionalFieldMutation(c.config, OpDelete)
	return &AdditionalFieldDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AdditionalFieldClient) DeleteOne(af *AdditionalField) *AdditionalFieldDeleteOne {
	return c.DeleteOneID(af.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AdditionalFieldClient) DeleteOneID(id uuid.UUID) *AdditionalFieldDeleteOne {
	builder := c.Delete().Where(additionalfield.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AdditionalFieldDeleteOne{builder}
}

// Query returns a query builder for AdditionalField.
func (c *AdditionalFieldClient) Query() *AdditionalFieldQuery {
	return &AdditionalFieldQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAdditionalField},
		inters: c.Interceptors(),
	}
}

// Get returns a AdditionalField entity by its id.
func (c *AdditionalFieldClient) Get(ctx context.Context, id uuid.UUID) (*AdditionalField, error) {
	return c.Query().Where(additionalfield.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AdditionalFieldClient) GetX(ctx context.Context, id uuid.UUID) *AdditionalField {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPassword queries the password edge of a AdditionalField.
func (c *AdditionalFieldClient) QueryPassword(af *AdditionalField) *PasswordQuery {
	query := (&PasswordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := af.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(additionalfield.Table, additionalfield.FieldID, id),
			sqlgraph.To(password.Table, password.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, additionalfield.PasswordTable, additionalfield.PasswordColumn),
		)
		fromV = sqlgraph.Neighbors(af.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AdditionalFieldClient) Hooks() []Hook {
	return c.hooks.AdditionalField
}

// Interceptors returns the client interceptors.
func (c *AdditionalFieldClient) Interceptors() []Interceptor {
	return c.inters.AdditionalField
}

func (c *AdditionalFieldClient) mutate(ctx context.Context, m *AdditionalFieldMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AdditionalFieldCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AdditionalFieldUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AdditionalFieldUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AdditionalFieldDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AdditionalField mutation op: %q", m.Op())
	}
}

// EmailChallengeClient is a client for the EmailChallenge schema.
type EmailChallengeClient struct {
	config
}

// NewEmailChallengeClient returns a client for the EmailChallenge from the given config.
func NewEmailChallengeClient(c config) *EmailChallengeClient {
	return &EmailChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailchallenge.Hooks(f(g(h())))`.
func (c *EmailChallengeClient) Use(hooks ...Hook) {
	c.hooks.EmailChallenge = append(c.hooks.EmailChallenge, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailchallenge.Intercept(f(g(h())))`.
func (c *EmailChallengeClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailChallenge = append(c.inters.EmailChallenge, interceptors...)
}

// Create returns a builder for creating a EmailChallenge entity.
func (c *EmailChallengeClient) Create() *EmailChallengeCreate {
	mutation := newEmailChallengeMutation(c.config, OpCreate)
	return &EmailChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailChallenge entities.
func (c *EmailChallengeClient) CreateBulk(builders ...*EmailChallengeCreate) *EmailChallengeCreateBulk {
	return &EmailChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailChallenge.
func (c *EmailChallengeClient) Update() *EmailChallengeUpdate {
	mutation := newEmailChallengeMutation(c.config, OpUpdate)
	return &EmailChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailChallengeClient) UpdateOne(ec *EmailChallenge) *EmailChallengeUpdateOne {
	mutation := newEmailChallengeMutation(c.config, OpUpdateOne, withEmailChallenge(ec))
	return &EmailChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailChallengeClient) UpdateOneID(id uuid.UUID) *EmailChallengeUpdateOne {
	mutation := newEmailChallengeMutation(c.config, OpUpdateOne, withEmailChallengeID(id))
	return &EmailChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailChallenge.
func (c *EmailChallengeClient) Delete() *EmailChallengeDelete {
	mutation := newEmailChallengeMutation(c.config, OpDelete)
	return &EmailChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailChallengeClient) DeleteOne(ec *EmailChallenge) *EmailChallengeDeleteOne {
	return c.DeleteOneID(ec.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailChallengeClient) DeleteOneID(id uuid.UUID) *EmailChallengeDeleteOne {
	builder := c.Delete().Where(emailchallenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailChallengeDeleteOne{builder}
}

// Query returns a query builder for EmailChallenge.
func (c *EmailChallengeClient) Query() *EmailChallengeQuery {
	return &EmailChallengeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailChallenge},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailChallenge entity by its id.
func (c *EmailChallengeClient) Get(ctx context.Context, id uuid.UUID) (*EmailChallenge, error) {
	return c.Query().Where(emailchallenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailChallengeClient) GetX(ctx context.Context, id uuid.UUID) *EmailChallenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a EmailChallenge.
func (c *EmailChallengeClient) QueryUser(ec *EmailChallenge) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ec.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailchallenge.Table, emailchallenge.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emailchallenge.UserTable, emailchallenge.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ec.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailChallengeClient) Hooks() []Hook {
	return c.hooks.EmailChallenge
}

// Interceptors returns the client interceptors.
func (c *EmailChallengeClient) Interceptors() []Interceptor {
	return c.inters.EmailChallenge
}

func (c *EmailChallengeClient) mutate(ctx context.Context, m *EmailChallengeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EmailChallenge mutation op: %q", m.Op())
	}
}

// PasswordClient is a client for the Password schema.
type PasswordClient struct {
	config
}

// NewPasswordClient returns a client for the Password from the given config.
func NewPasswordClient(c config) *PasswordClient {
	return &PasswordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `password.Hooks(f(g(h())))`.
func (c *PasswordClient) Use(hooks ...Hook) {
	c.hooks.Password = append(c.hooks.Password, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `password.Intercept(f(g(h())))`.
func (c *PasswordClient) Intercept(interceptors ...Interceptor) {
	c.inters.Password = append(c.inters.Password, interceptors...)
}

// Create returns a builder for creating a Password entity.
func (c *PasswordClient) Create() *PasswordCreate {
	mutation := newPasswordMutation(c.config, OpCreate)
	return &PasswordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Password entities.
func (c *PasswordClient) CreateBulk(builders ...*PasswordCreate) *PasswordCreateBulk {
	return &PasswordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Password.
func (c *PasswordClient) Update() *PasswordUpdate {
	mutation := newPasswordMutation(c.config, OpUpdate)
	return &PasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordClient) UpdateOne(pa *Password) *PasswordUpdateOne {
	mutation := newPasswordMutation(c.config, OpUpdateOne, withPassword(pa))
	return &PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordClient) UpdateOneID(id uuid.UUID) *PasswordUpdateOne {
	mutation := newPasswordMutation(c.config, OpUpdateOne, withPasswordID(id))
	return &PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Password.
func (c *PasswordClient) Delete() *PasswordDelete {
	mutation := newPasswordMutation(c.config, OpDelete)
	return &PasswordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordClient) DeleteOne(pa *Password) *PasswordDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordClient) DeleteOneID(id uuid.UUID) *PasswordDeleteOne {
	builder := c.Delete().Where(password.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordDeleteOne{builder}
}

// Query returns a query builder for Password.
func (c *PasswordClient) Query() *PasswordQuery {
	return &PasswordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePassword},
		inters: c.Interceptors(),
	}
}

// Get returns a Password entity by its id.
func (c *PasswordClient) Get(ctx context.Context, id uuid.UUID) (*Password, error) {
	return c.Query().Where(password.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordClient) GetX(ctx context.Context, id uuid.UUID) *Password {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAdditionalFields queries the additionalFields edge of a Password.
func (c *PasswordClient) QueryAdditionalFields(pa *Password) *AdditionalFieldQuery {
	query := (&AdditionalFieldClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(password.Table, password.FieldID, id),
			sqlgraph.To(additionalfield.Table, additionalfield.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, password.AdditionalFieldsTable, password.AdditionalFieldsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUrls queries the urls edge of a Password.
func (c *PasswordClient) QueryUrls(pa *Password) *URLQuery {
	query := (&URLClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(password.Table, password.FieldID, id),
			sqlgraph.To(url.Table, url.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, password.UrlsTable, password.UrlsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Password.
func (c *PasswordClient) QueryUser(pa *Password) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(password.Table, password.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, password.UserTable, password.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasswordClient) Hooks() []Hook {
	return c.hooks.Password
}

// Interceptors returns the client interceptors.
func (c *PasswordClient) Interceptors() []Interceptor {
	return c.inters.Password
}

func (c *PasswordClient) mutate(ctx context.Context, m *PasswordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Password mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id uuid.UUID) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id uuid.UUID) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id uuid.UUID) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// URLClient is a client for the Url schema.
type URLClient struct {
	config
}

// NewURLClient returns a client for the Url from the given config.
func NewURLClient(c config) *URLClient {
	return &URLClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `url.Hooks(f(g(h())))`.
func (c *URLClient) Use(hooks ...Hook) {
	c.hooks.Url = append(c.hooks.Url, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `url.Intercept(f(g(h())))`.
func (c *URLClient) Intercept(interceptors ...Interceptor) {
	c.inters.Url = append(c.inters.Url, interceptors...)
}

// Create returns a builder for creating a Url entity.
func (c *URLClient) Create() *URLCreate {
	mutation := newURLMutation(c.config, OpCreate)
	return &URLCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Url entities.
func (c *URLClient) CreateBulk(builders ...*URLCreate) *URLCreateBulk {
	return &URLCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Url.
func (c *URLClient) Update() *URLUpdate {
	mutation := newURLMutation(c.config, OpUpdate)
	return &URLUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *URLClient) UpdateOne(u *Url) *URLUpdateOne {
	mutation := newURLMutation(c.config, OpUpdateOne, withUrl(u))
	return &URLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *URLClient) UpdateOneID(id uuid.UUID) *URLUpdateOne {
	mutation := newURLMutation(c.config, OpUpdateOne, withUrlID(id))
	return &URLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Url.
func (c *URLClient) Delete() *URLDelete {
	mutation := newURLMutation(c.config, OpDelete)
	return &URLDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *URLClient) DeleteOne(u *Url) *URLDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *URLClient) DeleteOneID(id uuid.UUID) *URLDeleteOne {
	builder := c.Delete().Where(url.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &URLDeleteOne{builder}
}

// Query returns a query builder for Url.
func (c *URLClient) Query() *URLQuery {
	return &URLQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeURL},
		inters: c.Interceptors(),
	}
}

// Get returns a Url entity by its id.
func (c *URLClient) Get(ctx context.Context, id uuid.UUID) (*Url, error) {
	return c.Query().Where(url.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *URLClient) GetX(ctx context.Context, id uuid.UUID) *Url {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPassword queries the password edge of a Url.
func (c *URLClient) QueryPassword(u *Url) *PasswordQuery {
	query := (&PasswordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(url.Table, url.FieldID, id),
			sqlgraph.To(password.Table, password.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, url.PasswordTable, url.PasswordColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *URLClient) Hooks() []Hook {
	return c.hooks.Url
}

// Interceptors returns the client interceptors.
func (c *URLClient) Interceptors() []Interceptor {
	return c.inters.Url
}

func (c *URLClient) mutate(ctx context.Context, m *URLMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&URLCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&URLUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&URLUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&URLDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Url mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryEmailChallenges queries the emailChallenges edge of a User.
func (c *UserClient) QueryEmailChallenges(u *User) *EmailChallengeQuery {
	query := (&EmailChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emailchallenge.Table, emailchallenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmailChallengesTable, user.EmailChallengesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWebauthnCredentials queries the webauthnCredentials edge of a User.
func (c *UserClient) QueryWebauthnCredentials(u *User) *WebAuthnCredentialQuery {
	query := (&WebAuthnCredentialClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(webauthncredential.Table, webauthncredential.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WebauthnCredentialsTable, user.WebauthnCredentialsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWebauthnChallenges queries the webauthnChallenges edge of a User.
func (c *UserClient) QueryWebauthnChallenges(u *User) *WebAuthnChallengeQuery {
	query := (&WebAuthnChallengeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(webauthnchallenge.Table, webauthnchallenge.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WebauthnChallengesTable, user.WebauthnChallengesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPasswords queries the passwords edge of a User.
func (c *UserClient) QueryPasswords(u *User) *PasswordQuery {
	query := (&PasswordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(password.Table, password.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordsTable, user.PasswordsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WebAuthnChallengeClient is a client for the WebAuthnChallenge schema.
type WebAuthnChallengeClient struct {
	config
}

// NewWebAuthnChallengeClient returns a client for the WebAuthnChallenge from the given config.
func NewWebAuthnChallengeClient(c config) *WebAuthnChallengeClient {
	return &WebAuthnChallengeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthnchallenge.Hooks(f(g(h())))`.
func (c *WebAuthnChallengeClient) Use(hooks ...Hook) {
	c.hooks.WebAuthnChallenge = append(c.hooks.WebAuthnChallenge, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthnchallenge.Intercept(f(g(h())))`.
func (c *WebAuthnChallengeClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebAuthnChallenge = append(c.inters.WebAuthnChallenge, interceptors...)
}

// Create returns a builder for creating a WebAuthnChallenge entity.
func (c *WebAuthnChallengeClient) Create() *WebAuthnChallengeCreate {
	mutation := newWebAuthnChallengeMutation(c.config, OpCreate)
	return &WebAuthnChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebAuthnChallenge entities.
func (c *WebAuthnChallengeClient) CreateBulk(builders ...*WebAuthnChallengeCreate) *WebAuthnChallengeCreateBulk {
	return &WebAuthnChallengeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebAuthnChallenge.
func (c *WebAuthnChallengeClient) Update() *WebAuthnChallengeUpdate {
	mutation := newWebAuthnChallengeMutation(c.config, OpUpdate)
	return &WebAuthnChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebAuthnChallengeClient) UpdateOne(wac *WebAuthnChallenge) *WebAuthnChallengeUpdateOne {
	mutation := newWebAuthnChallengeMutation(c.config, OpUpdateOne, withWebAuthnChallenge(wac))
	return &WebAuthnChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebAuthnChallengeClient) UpdateOneID(id uuid.UUID) *WebAuthnChallengeUpdateOne {
	mutation := newWebAuthnChallengeMutation(c.config, OpUpdateOne, withWebAuthnChallengeID(id))
	return &WebAuthnChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebAuthnChallenge.
func (c *WebAuthnChallengeClient) Delete() *WebAuthnChallengeDelete {
	mutation := newWebAuthnChallengeMutation(c.config, OpDelete)
	return &WebAuthnChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebAuthnChallengeClient) DeleteOne(wac *WebAuthnChallenge) *WebAuthnChallengeDeleteOne {
	return c.DeleteOneID(wac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebAuthnChallengeClient) DeleteOneID(id uuid.UUID) *WebAuthnChallengeDeleteOne {
	builder := c.Delete().Where(webauthnchallenge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebAuthnChallengeDeleteOne{builder}
}

// Query returns a query builder for WebAuthnChallenge.
func (c *WebAuthnChallengeClient) Query() *WebAuthnChallengeQuery {
	return &WebAuthnChallengeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebAuthnChallenge},
		inters: c.Interceptors(),
	}
}

// Get returns a WebAuthnChallenge entity by its id.
func (c *WebAuthnChallengeClient) Get(ctx context.Context, id uuid.UUID) (*WebAuthnChallenge, error) {
	return c.Query().Where(webauthnchallenge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebAuthnChallengeClient) GetX(ctx context.Context, id uuid.UUID) *WebAuthnChallenge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a WebAuthnChallenge.
func (c *WebAuthnChallengeClient) QueryUser(wac *WebAuthnChallenge) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthnchallenge.Table, webauthnchallenge.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webauthnchallenge.UserTable, webauthnchallenge.UserColumn),
		)
		fromV = sqlgraph.Neighbors(wac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebAuthnChallengeClient) Hooks() []Hook {
	return c.hooks.WebAuthnChallenge
}

// Interceptors returns the client interceptors.
func (c *WebAuthnChallengeClient) Interceptors() []Interceptor {
	return c.inters.WebAuthnChallenge
}

func (c *WebAuthnChallengeClient) mutate(ctx context.Context, m *WebAuthnChallengeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebAuthnChallengeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebAuthnChallengeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebAuthnChallengeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebAuthnChallengeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebAuthnChallenge mutation op: %q", m.Op())
	}
}

// WebAuthnCredentialClient is a client for the WebAuthnCredential schema.
type WebAuthnCredentialClient struct {
	config
}

// NewWebAuthnCredentialClient returns a client for the WebAuthnCredential from the given config.
func NewWebAuthnCredentialClient(c config) *WebAuthnCredentialClient {
	return &WebAuthnCredentialClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webauthncredential.Hooks(f(g(h())))`.
func (c *WebAuthnCredentialClient) Use(hooks ...Hook) {
	c.hooks.WebAuthnCredential = append(c.hooks.WebAuthnCredential, hooks...)
}

// Use adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webauthncredential.Intercept(f(g(h())))`.
func (c *WebAuthnCredentialClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebAuthnCredential = append(c.inters.WebAuthnCredential, interceptors...)
}

// Create returns a builder for creating a WebAuthnCredential entity.
func (c *WebAuthnCredentialClient) Create() *WebAuthnCredentialCreate {
	mutation := newWebAuthnCredentialMutation(c.config, OpCreate)
	return &WebAuthnCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebAuthnCredential entities.
func (c *WebAuthnCredentialClient) CreateBulk(builders ...*WebAuthnCredentialCreate) *WebAuthnCredentialCreateBulk {
	return &WebAuthnCredentialCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebAuthnCredential.
func (c *WebAuthnCredentialClient) Update() *WebAuthnCredentialUpdate {
	mutation := newWebAuthnCredentialMutation(c.config, OpUpdate)
	return &WebAuthnCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebAuthnCredentialClient) UpdateOne(wac *WebAuthnCredential) *WebAuthnCredentialUpdateOne {
	mutation := newWebAuthnCredentialMutation(c.config, OpUpdateOne, withWebAuthnCredential(wac))
	return &WebAuthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebAuthnCredentialClient) UpdateOneID(id uuid.UUID) *WebAuthnCredentialUpdateOne {
	mutation := newWebAuthnCredentialMutation(c.config, OpUpdateOne, withWebAuthnCredentialID(id))
	return &WebAuthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebAuthnCredential.
func (c *WebAuthnCredentialClient) Delete() *WebAuthnCredentialDelete {
	mutation := newWebAuthnCredentialMutation(c.config, OpDelete)
	return &WebAuthnCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebAuthnCredentialClient) DeleteOne(wac *WebAuthnCredential) *WebAuthnCredentialDeleteOne {
	return c.DeleteOneID(wac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebAuthnCredentialClient) DeleteOneID(id uuid.UUID) *WebAuthnCredentialDeleteOne {
	builder := c.Delete().Where(webauthncredential.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebAuthnCredentialDeleteOne{builder}
}

// Query returns a query builder for WebAuthnCredential.
func (c *WebAuthnCredentialClient) Query() *WebAuthnCredentialQuery {
	return &WebAuthnCredentialQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebAuthnCredential},
		inters: c.Interceptors(),
	}
}

// Get returns a WebAuthnCredential entity by its id.
func (c *WebAuthnCredentialClient) Get(ctx context.Context, id uuid.UUID) (*WebAuthnCredential, error) {
	return c.Query().Where(webauthncredential.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebAuthnCredentialClient) GetX(ctx context.Context, id uuid.UUID) *WebAuthnCredential {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a WebAuthnCredential.
func (c *WebAuthnCredentialClient) QueryUser(wac *WebAuthnCredential) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webauthncredential.Table, webauthncredential.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, webauthncredential.UserTable, webauthncredential.UserColumn),
		)
		fromV = sqlgraph.Neighbors(wac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebAuthnCredentialClient) Hooks() []Hook {
	return c.hooks.WebAuthnCredential
}

// Interceptors returns the client interceptors.
func (c *WebAuthnCredentialClient) Interceptors() []Interceptor {
	return c.inters.WebAuthnCredential
}

func (c *WebAuthnCredentialClient) mutate(ctx context.Context, m *WebAuthnCredentialMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebAuthnCredentialCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebAuthnCredentialUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebAuthnCredentialUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebAuthnCredentialDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebAuthnCredential mutation op: %q", m.Op())
	}
}
