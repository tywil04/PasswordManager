// Code generated by ent, DO NOT EDIT.

package additionalfield

import (
	"PasswordManager/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLTE(FieldID, id))
}

// Key applies equality check predicate on the "key" field. It's identical to KeyEQ.
func Key(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldKey, v))
}

// KeyIv applies equality check predicate on the "keyIv" field. It's identical to KeyIvEQ.
func KeyIv(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldKeyIv, v))
}

// Value applies equality check predicate on the "value" field. It's identical to ValueEQ.
func Value(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldValue, v))
}

// ValueIv applies equality check predicate on the "valueIv" field. It's identical to ValueIvEQ.
func ValueIv(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldValueIv, v))
}

// KeyEQ applies the EQ predicate on the "key" field.
func KeyEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldKey, v))
}

// KeyNEQ applies the NEQ predicate on the "key" field.
func KeyNEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNEQ(FieldKey, v))
}

// KeyIn applies the In predicate on the "key" field.
func KeyIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldIn(FieldKey, vs...))
}

// KeyNotIn applies the NotIn predicate on the "key" field.
func KeyNotIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNotIn(FieldKey, vs...))
}

// KeyGT applies the GT predicate on the "key" field.
func KeyGT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGT(FieldKey, v))
}

// KeyGTE applies the GTE predicate on the "key" field.
func KeyGTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGTE(FieldKey, v))
}

// KeyLT applies the LT predicate on the "key" field.
func KeyLT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLT(FieldKey, v))
}

// KeyLTE applies the LTE predicate on the "key" field.
func KeyLTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLTE(FieldKey, v))
}

// KeyIvEQ applies the EQ predicate on the "keyIv" field.
func KeyIvEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldKeyIv, v))
}

// KeyIvNEQ applies the NEQ predicate on the "keyIv" field.
func KeyIvNEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNEQ(FieldKeyIv, v))
}

// KeyIvIn applies the In predicate on the "keyIv" field.
func KeyIvIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldIn(FieldKeyIv, vs...))
}

// KeyIvNotIn applies the NotIn predicate on the "keyIv" field.
func KeyIvNotIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNotIn(FieldKeyIv, vs...))
}

// KeyIvGT applies the GT predicate on the "keyIv" field.
func KeyIvGT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGT(FieldKeyIv, v))
}

// KeyIvGTE applies the GTE predicate on the "keyIv" field.
func KeyIvGTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGTE(FieldKeyIv, v))
}

// KeyIvLT applies the LT predicate on the "keyIv" field.
func KeyIvLT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLT(FieldKeyIv, v))
}

// KeyIvLTE applies the LTE predicate on the "keyIv" field.
func KeyIvLTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLTE(FieldKeyIv, v))
}

// ValueEQ applies the EQ predicate on the "value" field.
func ValueEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldValue, v))
}

// ValueNEQ applies the NEQ predicate on the "value" field.
func ValueNEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNEQ(FieldValue, v))
}

// ValueIn applies the In predicate on the "value" field.
func ValueIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldIn(FieldValue, vs...))
}

// ValueNotIn applies the NotIn predicate on the "value" field.
func ValueNotIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNotIn(FieldValue, vs...))
}

// ValueGT applies the GT predicate on the "value" field.
func ValueGT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGT(FieldValue, v))
}

// ValueGTE applies the GTE predicate on the "value" field.
func ValueGTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGTE(FieldValue, v))
}

// ValueLT applies the LT predicate on the "value" field.
func ValueLT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLT(FieldValue, v))
}

// ValueLTE applies the LTE predicate on the "value" field.
func ValueLTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLTE(FieldValue, v))
}

// ValueIvEQ applies the EQ predicate on the "valueIv" field.
func ValueIvEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldEQ(FieldValueIv, v))
}

// ValueIvNEQ applies the NEQ predicate on the "valueIv" field.
func ValueIvNEQ(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNEQ(FieldValueIv, v))
}

// ValueIvIn applies the In predicate on the "valueIv" field.
func ValueIvIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldIn(FieldValueIv, vs...))
}

// ValueIvNotIn applies the NotIn predicate on the "valueIv" field.
func ValueIvNotIn(vs ...[]byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldNotIn(FieldValueIv, vs...))
}

// ValueIvGT applies the GT predicate on the "valueIv" field.
func ValueIvGT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGT(FieldValueIv, v))
}

// ValueIvGTE applies the GTE predicate on the "valueIv" field.
func ValueIvGTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldGTE(FieldValueIv, v))
}

// ValueIvLT applies the LT predicate on the "valueIv" field.
func ValueIvLT(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLT(FieldValueIv, v))
}

// ValueIvLTE applies the LTE predicate on the "valueIv" field.
func ValueIvLTE(v []byte) predicate.AdditionalField {
	return predicate.AdditionalField(sql.FieldLTE(FieldValueIv, v))
}

// HasPassword applies the HasEdge predicate on the "password" edge.
func HasPassword() predicate.AdditionalField {
	return predicate.AdditionalField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PasswordTable, PasswordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPasswordWith applies the HasEdge predicate on the "password" edge with a given conditions (other predicates).
func HasPasswordWith(preds ...predicate.Password) predicate.AdditionalField {
	return predicate.AdditionalField(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PasswordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PasswordTable, PasswordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AdditionalField) predicate.AdditionalField {
	return predicate.AdditionalField(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AdditionalField) predicate.AdditionalField {
	return predicate.AdditionalField(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AdditionalField) predicate.AdditionalField {
	return predicate.AdditionalField(func(s *sql.Selector) {
		p(s.Not())
	})
}
