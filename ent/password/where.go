// Code generated by ent, DO NOT EDIT.

package password

import (
	"PasswordManager/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldName, v))
}

// NameIv applies equality check predicate on the "nameIv" field. It's identical to NameIvEQ.
func NameIv(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldNameIv, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldUsername, v))
}

// UsernameIv applies equality check predicate on the "usernameIv" field. It's identical to UsernameIvEQ.
func UsernameIv(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldUsernameIv, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldPassword, v))
}

// PasswordIv applies equality check predicate on the "passwordIv" field. It's identical to PasswordIvEQ.
func PasswordIv(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldPasswordIv, v))
}

// Colour applies equality check predicate on the "colour" field. It's identical to ColourEQ.
func Colour(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldColour, v))
}

// ColourIv applies equality check predicate on the "colourIv" field. It's identical to ColourIvEQ.
func ColourIv(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldColourIv, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldName, v))
}

// NameIvEQ applies the EQ predicate on the "nameIv" field.
func NameIvEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldNameIv, v))
}

// NameIvNEQ applies the NEQ predicate on the "nameIv" field.
func NameIvNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldNameIv, v))
}

// NameIvIn applies the In predicate on the "nameIv" field.
func NameIvIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldNameIv, vs...))
}

// NameIvNotIn applies the NotIn predicate on the "nameIv" field.
func NameIvNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldNameIv, vs...))
}

// NameIvGT applies the GT predicate on the "nameIv" field.
func NameIvGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldNameIv, v))
}

// NameIvGTE applies the GTE predicate on the "nameIv" field.
func NameIvGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldNameIv, v))
}

// NameIvLT applies the LT predicate on the "nameIv" field.
func NameIvLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldNameIv, v))
}

// NameIvLTE applies the LTE predicate on the "nameIv" field.
func NameIvLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldNameIv, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldUsername, v))
}

// UsernameIvEQ applies the EQ predicate on the "usernameIv" field.
func UsernameIvEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldUsernameIv, v))
}

// UsernameIvNEQ applies the NEQ predicate on the "usernameIv" field.
func UsernameIvNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldUsernameIv, v))
}

// UsernameIvIn applies the In predicate on the "usernameIv" field.
func UsernameIvIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldUsernameIv, vs...))
}

// UsernameIvNotIn applies the NotIn predicate on the "usernameIv" field.
func UsernameIvNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldUsernameIv, vs...))
}

// UsernameIvGT applies the GT predicate on the "usernameIv" field.
func UsernameIvGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldUsernameIv, v))
}

// UsernameIvGTE applies the GTE predicate on the "usernameIv" field.
func UsernameIvGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldUsernameIv, v))
}

// UsernameIvLT applies the LT predicate on the "usernameIv" field.
func UsernameIvLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldUsernameIv, v))
}

// UsernameIvLTE applies the LTE predicate on the "usernameIv" field.
func UsernameIvLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldUsernameIv, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldPassword, v))
}

// PasswordIvEQ applies the EQ predicate on the "passwordIv" field.
func PasswordIvEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldPasswordIv, v))
}

// PasswordIvNEQ applies the NEQ predicate on the "passwordIv" field.
func PasswordIvNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldPasswordIv, v))
}

// PasswordIvIn applies the In predicate on the "passwordIv" field.
func PasswordIvIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldPasswordIv, vs...))
}

// PasswordIvNotIn applies the NotIn predicate on the "passwordIv" field.
func PasswordIvNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldPasswordIv, vs...))
}

// PasswordIvGT applies the GT predicate on the "passwordIv" field.
func PasswordIvGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldPasswordIv, v))
}

// PasswordIvGTE applies the GTE predicate on the "passwordIv" field.
func PasswordIvGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldPasswordIv, v))
}

// PasswordIvLT applies the LT predicate on the "passwordIv" field.
func PasswordIvLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldPasswordIv, v))
}

// PasswordIvLTE applies the LTE predicate on the "passwordIv" field.
func PasswordIvLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldPasswordIv, v))
}

// ColourEQ applies the EQ predicate on the "colour" field.
func ColourEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldColour, v))
}

// ColourNEQ applies the NEQ predicate on the "colour" field.
func ColourNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldColour, v))
}

// ColourIn applies the In predicate on the "colour" field.
func ColourIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldColour, vs...))
}

// ColourNotIn applies the NotIn predicate on the "colour" field.
func ColourNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldColour, vs...))
}

// ColourGT applies the GT predicate on the "colour" field.
func ColourGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldColour, v))
}

// ColourGTE applies the GTE predicate on the "colour" field.
func ColourGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldColour, v))
}

// ColourLT applies the LT predicate on the "colour" field.
func ColourLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldColour, v))
}

// ColourLTE applies the LTE predicate on the "colour" field.
func ColourLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldColour, v))
}

// ColourIvEQ applies the EQ predicate on the "colourIv" field.
func ColourIvEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldEQ(FieldColourIv, v))
}

// ColourIvNEQ applies the NEQ predicate on the "colourIv" field.
func ColourIvNEQ(v []byte) predicate.Password {
	return predicate.Password(sql.FieldNEQ(FieldColourIv, v))
}

// ColourIvIn applies the In predicate on the "colourIv" field.
func ColourIvIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldIn(FieldColourIv, vs...))
}

// ColourIvNotIn applies the NotIn predicate on the "colourIv" field.
func ColourIvNotIn(vs ...[]byte) predicate.Password {
	return predicate.Password(sql.FieldNotIn(FieldColourIv, vs...))
}

// ColourIvGT applies the GT predicate on the "colourIv" field.
func ColourIvGT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGT(FieldColourIv, v))
}

// ColourIvGTE applies the GTE predicate on the "colourIv" field.
func ColourIvGTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldGTE(FieldColourIv, v))
}

// ColourIvLT applies the LT predicate on the "colourIv" field.
func ColourIvLT(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLT(FieldColourIv, v))
}

// ColourIvLTE applies the LTE predicate on the "colourIv" field.
func ColourIvLTE(v []byte) predicate.Password {
	return predicate.Password(sql.FieldLTE(FieldColourIv, v))
}

// HasAdditionalFields applies the HasEdge predicate on the "additionalFields" edge.
func HasAdditionalFields() predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdditionalFieldsTable, AdditionalFieldsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdditionalFieldsWith applies the HasEdge predicate on the "additionalFields" edge with a given conditions (other predicates).
func HasAdditionalFieldsWith(preds ...predicate.AdditionalField) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdditionalFieldsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AdditionalFieldsTable, AdditionalFieldsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUrls applies the HasEdge predicate on the "urls" edge.
func HasUrls() predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UrlsTable, UrlsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUrlsWith applies the HasEdge predicate on the "urls" edge with a given conditions (other predicates).
func HasUrlsWith(preds ...predicate.Url) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UrlsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, UrlsTable, UrlsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVault applies the HasEdge predicate on the "vault" edge.
func HasVault() predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVaultWith applies the HasEdge predicate on the "vault" edge with a given conditions (other predicates).
func HasVaultWith(preds ...predicate.Vault) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VaultInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, VaultTable, VaultColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Password) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Password) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Password) predicate.Password {
	return predicate.Password(func(s *sql.Selector) {
		p(s.Not())
	})
}
