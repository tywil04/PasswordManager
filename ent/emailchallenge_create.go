// Code generated by ent, DO NOT EDIT.

package ent

import (
	"PasswordManager/ent/challenge"
	"PasswordManager/ent/emailchallenge"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmailChallengeCreate is the builder for creating a EmailChallenge entity.
type EmailChallengeCreate struct {
	config
	mutation *EmailChallengeMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (ecc *EmailChallengeCreate) SetCode(b []byte) *EmailChallengeCreate {
	ecc.mutation.SetCode(b)
	return ecc
}

// SetID sets the "id" field.
func (ecc *EmailChallengeCreate) SetID(u uuid.UUID) *EmailChallengeCreate {
	ecc.mutation.SetID(u)
	return ecc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ecc *EmailChallengeCreate) SetNillableID(u *uuid.UUID) *EmailChallengeCreate {
	if u != nil {
		ecc.SetID(*u)
	}
	return ecc
}

// SetChallengeID sets the "challenge" edge to the Challenge entity by ID.
func (ecc *EmailChallengeCreate) SetChallengeID(id uuid.UUID) *EmailChallengeCreate {
	ecc.mutation.SetChallengeID(id)
	return ecc
}

// SetNillableChallengeID sets the "challenge" edge to the Challenge entity by ID if the given value is not nil.
func (ecc *EmailChallengeCreate) SetNillableChallengeID(id *uuid.UUID) *EmailChallengeCreate {
	if id != nil {
		ecc = ecc.SetChallengeID(*id)
	}
	return ecc
}

// SetChallenge sets the "challenge" edge to the Challenge entity.
func (ecc *EmailChallengeCreate) SetChallenge(c *Challenge) *EmailChallengeCreate {
	return ecc.SetChallengeID(c.ID)
}

// Mutation returns the EmailChallengeMutation object of the builder.
func (ecc *EmailChallengeCreate) Mutation() *EmailChallengeMutation {
	return ecc.mutation
}

// Save creates the EmailChallenge in the database.
func (ecc *EmailChallengeCreate) Save(ctx context.Context) (*EmailChallenge, error) {
	ecc.defaults()
	return withHooks[*EmailChallenge, EmailChallengeMutation](ctx, ecc.sqlSave, ecc.mutation, ecc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ecc *EmailChallengeCreate) SaveX(ctx context.Context) *EmailChallenge {
	v, err := ecc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecc *EmailChallengeCreate) Exec(ctx context.Context) error {
	_, err := ecc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecc *EmailChallengeCreate) ExecX(ctx context.Context) {
	if err := ecc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ecc *EmailChallengeCreate) defaults() {
	if _, ok := ecc.mutation.ID(); !ok {
		v := emailchallenge.DefaultID()
		ecc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ecc *EmailChallengeCreate) check() error {
	return nil
}

func (ecc *EmailChallengeCreate) sqlSave(ctx context.Context) (*EmailChallenge, error) {
	if err := ecc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ecc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ecc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ecc.mutation.id = &_node.ID
	ecc.mutation.done = true
	return _node, nil
}

func (ecc *EmailChallengeCreate) createSpec() (*EmailChallenge, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailChallenge{config: ecc.config}
		_spec = sqlgraph.NewCreateSpec(emailchallenge.Table, sqlgraph.NewFieldSpec(emailchallenge.FieldID, field.TypeUUID))
	)
	if id, ok := ecc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ecc.mutation.Code(); ok {
		_spec.SetField(emailchallenge.FieldCode, field.TypeBytes, value)
		_node.Code = value
	}
	if nodes := ecc.mutation.ChallengeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   emailchallenge.ChallengeTable,
			Columns: []string{emailchallenge.ChallengeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(challenge.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.challenge_email_challenge = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EmailChallengeCreateBulk is the builder for creating many EmailChallenge entities in bulk.
type EmailChallengeCreateBulk struct {
	config
	builders []*EmailChallengeCreate
}

// Save creates the EmailChallenge entities in the database.
func (eccb *EmailChallengeCreateBulk) Save(ctx context.Context) ([]*EmailChallenge, error) {
	specs := make([]*sqlgraph.CreateSpec, len(eccb.builders))
	nodes := make([]*EmailChallenge, len(eccb.builders))
	mutators := make([]Mutator, len(eccb.builders))
	for i := range eccb.builders {
		func(i int, root context.Context) {
			builder := eccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailChallengeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, eccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, eccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, eccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (eccb *EmailChallengeCreateBulk) SaveX(ctx context.Context) []*EmailChallenge {
	v, err := eccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (eccb *EmailChallengeCreateBulk) Exec(ctx context.Context) error {
	_, err := eccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eccb *EmailChallengeCreateBulk) ExecX(ctx context.Context) {
	if err := eccb.Exec(ctx); err != nil {
		panic(err)
	}
}
